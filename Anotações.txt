Funções e instâncias:

    function Pessoa() {
        this.nome = 'Guilherme'
        this.idade = 28
    }

    var pessoa = new Pessoa()
    console.log(pessoa.nome)
    console.log(pessoa.idade)

Classes:

    class Animal {
        constructor(nome) { //Não precisa do function
            this.nome = nome
        }

        printNome() { //Não precisa do function
            return this.nome
        }
    }

    class Cachorro extends Animal {
        constructor(nome) {
            super(nome) //Para atribuir ao construtor da classe Animal
        }
    }

    cachorro = new Cachorro('Bob')
    console.log(cachorro.nome)

Trabalhando com datas:

    var date = new Date() //Já é nativo do js - sem parâmetro, retorna a data e o horário atual

    console.log(date.getDate())//O dia do mês. Ex: 25
    console.log(date.getDay())//O dia da semana (Domingo é zero)
    console.log(date.getFullYear())//Ano
    console.log(date.getHours())//Ex: 15
    console.log(date.getMinutes())//Ex: 58

    var date2 = new Date('05/20/2023')// Datas personalizadas MM-DD-AAAA

Calculando diferenças de datas: (to-do)

    console.log(date2.getTime())//Em milisegundos


    var diference = (date2.getTime() - date.getTime()) / (1000 * 360 * 24)//Transformando ms em dias
    console.log(diference)

Manipulando conteúdo:

Pela tag:

    var p = document.getElementsByTagName('p')//Cria um array com todas as ocorrências do parágrafo

    console.log(p[0].innerHTML)//Pega todos os paragrafos existendes e seleciona o primeiro[0] e retorna o conteudo

    p[0].innerHTML = 'Novo conteúdo'//Muda o que está escrito

    for (var i = 0; i < p.length; i++){ //Manipulando com laço de repetição
        p[i].innerHTML =  'Valor:' + i 
    }

Manipulando css pelo id:

    var el = document.getElementById('box')
    el.style.backgroundColor = 'red'
    el.style.marginLeft = '200'

Manipulando css pela classe:

    var elementos = document.getElementsByClassName('box')

    for(var i = 0; i < elementos.length; i++) {
        var el = elementos[i]//Primeira ocorrência

        el.style.backgroundColor = 'green'
        el.style.width = '100px'
        el.style.height = '100px'
        el.style.margin = '10px'
    }

query selector all:

    var els = document.querySelectorAll('.testes ')//como se tivesse referenciando no css
    els[0].innerHTML = '<div class="inside-testes-via-js">TEXTO VIA JS</div>'

Para pegar todos as divs e todos os p:

    document.querySelectorAll('div, p')//Pode colocar classe, id ...

Para pegar todos as divs que possuem um atributo. ex: class:

    document.querySelectorAll('div[class]')

Para pegar todos elementos p que estão dentro de um elemento div - Retorna somente as divs que contem um elemento p:

    document.querySelectorAll('div > p')//Divs que contem o elemento p

Animações com js puro

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>

        <style>
            .box {
                width: 200px;
                height: 200px;
                background-color: red;
                margin-left: 0;
            }
            .animEsquerda {
                transition: 1s;
                margin-left: 90px;
                margin-top: 20px;
                background-color: green;
            }
        </style>
    </head>
    <body>
        <div class="box"></div>
        <script>
            var box = document.querySelectorAll('.box')[0]
            /* Para executar automaticamente
            setTimeout(()=>{
                box.classList.add('animEsquerda')
            }, 1000)
            */
            //Animando com o click
            box.addEventListener('click', ()=>{
                box.classList.add('animEsquerda')
            })
        </script>
    </body>
    </html>

Animação ver mais:

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <style>
            .conteudo h2 span {
                font-size: 13px;
                cursor: pointer;
            }
            .conteudo p {
                overflow: hidden;
                height: 10px;
                transition: 1s;
            }
            .mostrar {
                height: 200px !important;
            }
        </style>
    </head>
    <body>
        <div class="conteudo">
            <h2>Título do conteudo <span>Ver Mais</span></h2>
            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Consectetur enim natus ipsa delectus, necessitatibus vel nisi modi molestiae est. Rerum, sint aspernatur accusamus suscipit officiis eius reiciendis dolor atque explicabo.! Lorem, ipsum dolor sit amet consectetur adipisicing elit. Aut hic sit obcaecati nam corrupti, ipsum vero quibusdam quam officia ipsa, nisi perferendis maiores pariatur nobis! Neque, earum. Nisi, rem vitae?</p>
        </div>
        <script>
            var span = document.querySelector('.conteudo span')
            span.addEventListener('click', ()=>{
                var conteudo = document.querySelector('.conteudo p')

                if(conteudo.classList.contains('mostrar')) {
                    span.innerHTML = 'Ver mais'
                    conteudo.classList.remove('mostrar')
                } else {
                    span.innerHTML = 'Ocutar'
                    conteudo.classList.add('mostrar')
                }

            })
        </script>
    </body>
    </html>

Pegando elemento filho:

    var titulos = document.querySelectorAll('.tituloFilme')
        for (var i = 0; i < titulos.length; i++) {
            titulos[i].addEventListener('click', (t)=>{
                t.target.querySelector('.description').style.display = 'block' //Pode ser o childNode
            })
        }

Com childNodes:


    function inimigoJogar() {
        var rand = Math.floor(Math.random()*3)//Para gerar um inteiro aleatorio entre 0 e 2

        const enemyOptions = document.querySelectorAll('.enemy-options div')
        for(var i = 0; i < enemyOptions.length; i++) {
            if(i == rand) {
                enemyOptions[i].childNodes[0].style.opacity = 1 //Uso do childNodes
            }
        }

    }

Mostrar mais com novas ocorrências:

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <style>
            .conteudo h2 span {
                font-size: 13px;
                cursor: pointer;
            }
            .conteudo p {
                overflow: hidden;
                height: 10px;
                transition: 1s;
            }
            .mostrar {
                height: 200px !important;
            }
        </style>
    </head>
    <body>
        <div class="conteudo">
            <h2>Título do conteudo <span>Ver Mais</span></h2>
            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Consectetur enim natus ipsa delectus, necessitatibus vel nisi modi molestiae est. Rerum, sint aspernatur accusamus suscipit officiis eius reiciendis dolor atque explicabo.! Lorem, ipsum dolor sit amet consectetur adipisicing elit. Aut hic sit obcaecati nam corrupti, ipsum vero quibusdam quam officia ipsa, nisi perferendis maiores pariatur nobis! Neque, earum. Nisi, rem vitae?</p>
        </div>

        <div class="conteudo">
            <h2>Título do conteudo <span>Ver Mais</span></h2>
            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Consectetur enim natus ipsa delectus, necessitatibus vel nisi modi molestiae est. Rerum, sint aspernatur accusamus suscipit officiis eius reiciendis dolor atque explicabo.! Lorem, ipsum dolor sit amet consectetur adipisicing elit. Aut hic sit obcaecati nam corrupti, ipsum vero quibusdam quam officia ipsa, nisi perferendis maiores pariatur nobis! Neque, earum. Nisi, rem vitae?</p>
        </div>

        <div class="conteudo">
            <h2>Título do conteudo <span>Ver Mais</span></h2>
            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Consectetur enim natus ipsa delectus, necessitatibus vel nisi modi molestiae est. Rerum, sint aspernatur accusamus suscipit officiis eius reiciendis dolor atque explicabo.! Lorem, ipsum dolor sit amet consectetur adipisicing elit. Aut hic sit obcaecati nam corrupti, ipsum vero quibusdam quam officia ipsa, nisi perferendis maiores pariatur nobis! Neque, earum. Nisi, rem vitae?</p>
        </div>

        <div class="conteudo">
            <h2>Título do conteudo <span>Ver Mais</span></h2>
            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Consectetur enim natus ipsa delectus, necessitatibus vel nisi modi molestiae est. Rerum, sint aspernatur accusamus suscipit officiis eius reiciendis dolor atque explicabo.! Lorem, ipsum dolor sit amet consectetur adipisicing elit. Aut hic sit obcaecati nam corrupti, ipsum vero quibusdam quam officia ipsa, nisi perferendis maiores pariatur nobis! Neque, earum. Nisi, rem vitae?</p>
        </div>
        <script>
            var spans = document.querySelectorAll('.conteudo span');

            for (var i = 0; i < spans.length; i++) {
                var span = spans[i];
            
                span.addEventListener('click', function() {
                    var conteudo = this.parentNode.nextElementSibling;
            
                    if (conteudo.classList.contains('mostrar')) {
                        this.innerHTML = 'Ver mais';
                        conteudo.classList.remove('mostrar');
                    } else {
                        this.innerHTML = 'Ocultar';
                        conteudo.classList.add('mostrar');
                    }
                });
            }
        </script>
    </body>
    </html>

Slider js puro:

    var lastIndex = 0;

    var images = document.querySelectorAll('.container img')

    images.forEach((item, index) => {
        document.querySelectorAll('.bullet-single')[index]
        .addEventListener('click', ()=>{
            let lastImage = document.querySelectorAll('.container img')[lastIndex]
            let actualImage = document.querySelectorAll('.container img')[index]

            //resetar as bullets e setar a nova com base na imagem
            document.querySelectorAll('.bullet-single')[lastIndex]
            .classList.remove('active-bullet')

            document.querySelectorAll('.bullet-single')[index]
            .classList.add('active-bullet')

            lastImage.style.opacity = '0'
            actualImage.style.opacity = '1'

            lastIndex = index
        })
    })

Arrow functions e Callback:

    const testes = (par)=>{
        console.log(par)
    }

    testes('olá')

    //Callback
    const testes2 = (texto, par)=>{
        par(texto)
    }

    testes2('Olá mundo', (texto)=>{
        console.log(texto)
    })

Callback: Chama depois que uma ação foi feita

    function exibir(num) {
        console.log(`A operação resultou em ${num}`)
    }

    function soma(a, b, callback){
        var op = a+b
        callback(op)
    }

    function multiplicacao(a, b, cb){
        var op = a*b
        cb(op)
    }

    soma(2, 2, exibir)
    multiplicacao(2, 4, exibir)

Exemplo 2 da callback:

    const saudacao = nome => alert('Olá ' + nome)

    const processaEntradaUsuario = (callback) => {
        const nome = prompt('Digite seu nome: ')
        callback(nome)
    }

    processaEntradaUsuario(saudacao)

Exemplo 3 de callback:

    const callback = e => alert('Aconteceu um evento ' + e.type)
    window.addEventListener('click', callback)

Exemplo 4 callback:

    const somar = (x, y) => x + y
    const calcular = (x, y, computar) => computar(x, y)

    const resultado = calcular(20, 30, somar)
    console.log(resultado)

Exemplo 5 - Esclarecedor

    //Vamos criar um botão via js
    function newButton(text, callback) {
        const $body = document.querySelector('body')
        const $button = document.createElement('button')
        $button.textContent = text //O texto do parâmetro

        callback($button) //Posso fazer o que quiser no botão, antes de indexa-lo no body

        $body.insertAdjacentElement('beforeend', $button) //Adicionando antes do fechamento da tag doby

        return $button
    }

    newButton('Login', (button) => {
        button.style.cssText = `
            font-size: 40px;
        `

        button.addEventListener('click', () => {
            console.log('O botão login foi clicado')
        })
    })

    newButton('Signup', (button) => {
        button.style.cssText = `
            font-size: 80px;
            color: red;
        `
    })

Map callback:

    //Função de alta ordem - Cria um novo array com a informação diferente do primeiro
    const arr = [1, 2, 3]
    const newArr = arr.map(elemento => elemento * 2)
    console.log(newArr)

Destructure

    const arr = ['Guilherme', 'João', 'Filipe']

    //Armazenando em uma variável específica cada índice do array
    var [a, b, c] = arr
    console.log(a) //Guilherme

    //Operador spread
    const arr2 = ['Guilherme', 'João', 'Filipe', 'Leo', 'Juliano']

    var [a, b,...c] = arr2 //O a é Guilherme, o b é João, e o c é um array com o resto dos nomes
    console.log(c)

Rest e Spread

    //Spread
    var nomes = [{nome: 'João'}, {nome: 'Felipe'}]

    //Junta com o array de nomes, no início
    const objetos = [...nomes,{
        nome: 'Guilherme'
    }]

    console.log(objetos) //Vai mostrar tudo

    //Rest
    //Os parâmetros ficam disponíveis em formato de array. Posso colocar um número indefinido de parâmetros
    function testes(...par){
        console.log(par)

    }

    testes(1, 2, 3, 4, 5, 6, {nome: 'Guilherme'})

Promises, Async e await

    //Promise
    //Uma função que eu criei pode ser resolvida, me retornando  algo ou ela pode ser rejeitada
    function testes(){
        return new Promise((resolve, reject)=>{
            const erro = false

            //passa pela validação

            if(erro){
                reject('A promisse foi rejeitada! Deu erro!');

            } else {
                resolve('A promise foi resolvida com sucesso');

            }

        })
    }

    testes()
    .then(res => console.log(res)) //O then é se deu certo. A função retorna o resolve
    .catch(rej => console.log(rej)) //O catch é se deu erro. A função retorna o reject

    //Funções assíncronas
    //Forma mais elegante de lidar com a promise

    async function testes2() {
        //O await serve para dizer que o olá só será executado depois que a promise for resolvida
        await testes()
        .then((res)=> console.log(res))

        console.log('Olá')
    }

    testes2()

Ajax - Asynchromous JavaScript and xml (client side to server side)

Jeito antigo:

    var request = new XMLHttpRequest()
    request.open('GET', 'https://jsonplaceholder.typicode.com/todos/1', true)

    request.onload = () => {
        if(this.status >= 200 && this.status < 400){
            //request foi feita com sucesso
            var data = JSON.parse(this.response)
            console.log(data)

        } else {
            //erro
        }

    }

    request.onerror = () => {

    }

    request.send()//Enviar a requisição

Jeito moderno:

    //GET
    fetch('https://jsonplaceholder.typicode.com/todos/1')
    .then(response => response.json())
    .then(json => console.log(json))

    //POST
    fetch('https://jsonplaceholder.typicode.com/posts', {
        method: 'POST',
        body: JSON.stringify({
            title: 'DankiCode',
            body: 'Meu conteúdo',
            userId: 10 
        }),
        headers: {
            'Content-Type': 'application/json; charset=UTF-8'
        }
    })
    .then(response => response.json())
    .then(json => console.log(json))

Consumindo api com fetch:

    <!DOCTYPE html>
    <html lang="pt-br">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Consumindo Api de Filmes</title>
        <style>
            .tituloFilme {
                cursor:pointer;

            }

            .tituloFilme:hover {
                color: red;

            }

            .description {
                display:none;
                color: black;

            }
        </style>
    </head>
    <body>
        <div class="container">

        </div>
        <script>
            //GET
            //Link https://api.themoviedb.org/3/movie/popular?api_key=506fadb0256c13349acc05dabebf9604&language=en-US&page=1
            fetch('https://api.themoviedb.org/3/movie/popular?api_key=506fadb0256c13349acc05dabebf9604&language=en-US&page=1', {method: 'GET'})
                .then(response => response.json())
                .then(json => {
                    var container = document.querySelector('.container')
                    json.results.map((val) => {
                        container.innerHTML += `<div class="tituloFilme">${val.title}<div class="description">${val.overview}</div><hr></div>` //A chave para recuperar o titulo e a descrição
                        
                    })
                    var titulos = document.querySelectorAll('.tituloFilme')
                    titulos.forEach((titulo) => {
                        titulo.addEventListener('click', () => {
                            var description = titulo.querySelector('.description')
                            if (description.style.display === 'none' || description.style.display === '') {
                                description.style.display = 'block'
                            } else {
                                description.style.display = 'none'
                            }
                        })
                    })

                    /* Outra forma de fazer esta função
                    var titulos = document.querySelectorAll('.tituloFilme')
                    for (var i = 0; i < titulos.length; i++) {
                        titulos[i].addEventListener('click', (t)=>{
                            if(t.target.querySelector('.description').style.display == 'none') {
                                t.target.querySelector('.description').style.display = 'block'
                            } else {
                                t.target.querySelector('.description').style.display = 'none'
                            }
                        })
                    }
                    */

                })
            
        </script>
    </body>
    </html>

Pegando valores do formulário com js puro:

    <script>
        var itens = []

        document.querySelector('input[type=submit]')
        .addEventListener('click', () => {
            var nomeProduto = document.querySelector('input[name=nome_produto]').value
            var precoProduto = document.querySelector('input[name=valor_produto]').value

            itens.push({//Pega os valores do input e adiciona no array
                nome: nomeProduto, 
                valor: precoProduto
            })

        })
    </script>

Função no click do button:

    var itens = []
        
    document.querySelector('input[type=submit]')
        .addEventListener('click', () => {
            var nomeProduto = document.querySelector('input[name=nome_produto]')
            var precoProduto = document.querySelector('input[name=valor_produto]')

            if(nomeProduto.value != '' && precoProduto.value != '') {
                itens.push({ //Pega os valores do input e adiciona no array
                    nome: nomeProduto.value,
                    valor: parseFloat(precoProduto.value)
                })
        
                //Adicionando dinamicamente os itens
                var listaProdutos = document.querySelector('.lista-produtos')
                var somatorio = itens.map(i => i.valor).reduce((a, c) => a + c)
                listaProdutos.innerHTML = '' //Para não ficar duplicando
        
                itens.forEach((val, index) => {
                    listaProdutos.innerHTML += `
                        <div class="lista-produto-single">
                            <h3>${val.nome}</h3>
                            <h3 class="price-produto"><span>R$${(val.valor).toFixed(2)}</span></h3>
                            <button class="remover" onclick="removerItem(${index})">remover</button>
                        </div>`
                })
        
                //Limpando os inputs
                nomeProduto.value = ''
                precoProduto.value = ''
        
                let elementoSoma = document.querySelector('.soma-produto h1')
                elementoSoma.innerHTML = `Total: R$ ${somatorio.toFixed(2)}`
            } else {
                alert('Insira todos os valores para continuar')
            }
            
        })

    // Função para remover um item da lista
    function removerItem(index) {
        if(itens.length == 1){
            limparRegistros()
        } else {
            itens.splice(index, 1) // Remove o item do array
            let listaProdutos = document.querySelector('.lista-produtos')
            var somatorio = itens.map(i => i.valor).reduce((a, c) => a + c)
            listaProdutos.innerHTML = ''

            itens.forEach((val, index) => {
                listaProdutos.innerHTML += `
                    <div class="lista-produto-single">
                        <h3>${val.nome}</h3>
                        <h3 class="price-produto"><span>R$${(val.valor).toFixed(2)}</span></h3>
                        <button class="remover" onclick="removerItem(${index})">remover</button>
                    </div>`
            })

            let elementoSoma = document.querySelector('.soma-produto h1')
            elementoSoma.innerHTML = `Total: R$ ${somatorio.toFixed(2)}`
        }
        
    }

    // Limpando todos os registros
    function limparRegistros(){
        itens = []
        document.querySelector('.lista-produtos').innerHTML = ''
        document.querySelector('.soma-produto h1').innerHTML = 'Total: R$0.00'
        
    }

Função para destacar opacidade de item clicado:

    <script>
        var elementos = document.querySelectorAll('.player-options div > img')

        function resetOpacityPlayers() {
            for(var i = 0; i < elementos.length; i++) {
                elementos[i].style.opacity = 0.3
            }
        }

        for(var i = 0; i < elementos.length; i++) {
            elementos[i].addEventListener('click', (t) => {
                resetOpacityPlayers();
                t.target.style.opacity = 1
                
            })
        }
    </script>

Loading com JavaScript puro:

    <!DOCTYPE html>
    <html lang="pt_BR">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>PokeDex</title>
        <link rel="stylesheet" href="style.css">
    </head>
    <body>
        <div class="overlay-loading ">
            <img src="ajax-loader.gif">
        </div><!--overlay-loading -->

        <div class="main">
            <h2>PokeDex</h2>
            <input type="text" name="quantidade" id="quantidade" placeholder="Insira a quantidade de pokemons e aperte enter...">
            <div class="pokemon-boxes">
    <!--Onde será carregada dinamicamente-->
            </div><!--pokemon-boxes-->
        </div>
        <script>
            var quantidade = document.getElementById('quantidade');

            quantidade.addEventListener('keyup', (event) => {
                if (event.key === 'Enter') {//Para só chamar quando apertar o enter
                    document.querySelector('.overlay-loading').style.display = 'block' //Para ativar o loading
                    pegaPokemons(parseInt(quantidade.value)); // Para usarmos no if

                }

            })
            
            pegaPokemons(3)//Por padrão, caso não insira nada no input
            function pegaPokemons(quantidade) {
                fetch(`https://pokeapi.co/api/v2/pokemon?limit=${quantidade}`)
                .then(response => response.json())
                .then(allPokemon => {
                    var pokemons = []
        
                    allPokemon.results.forEach(val =>{
                        fetch(val.url)
                        .then(response => response.json())
                        .then(pokemonSingle => {
                            pokemons.push({nome: val.name, imagem: pokemonSingle.sprites.front_default})
        
                            if(pokemons.length == quantidade) { //Tem que ser aqui dentro, pois é assíncrono
                                //finalizamos nossas requisições
                                var pokemonBoxes = document.querySelector('.pokemon-boxes')//Para desativar o loading
                                pokemonBoxes.innerHTML = ''//reset
        
                                pokemons.forEach(val => {
                                    document.querySelector('.overlay-loading').style.display = 'none'
                                    pokemonBoxes.innerHTML += `
                                        <div class="pokemon-box">
                                            <img src="${val.imagem}" alt="imagem pokemon">
                                            <p>${val.nome}</p>
                                        </div>`
        
                                })
                            }
                            
                        })
        
                    })
        
                })

            }
        </script>
    </body>
    </html>


Recuperar o elemento vizinho que antecede a ele, no caso, o span (posso usar o previousElementSibling) - desabilitando radio button:

    <script>
        var elementos = document.querySelectorAll('[type=radio]')
        var acertos = 0
        var erros = 0
        var totalRespostas = document.querySelectorAll('[value=correta]').length
    
        elementos.forEach((elemento) => {
            elemento.addEventListener('change', (e) => {
                let marcado = e.target.value
    
                if (marcado == 'correta') {
                    let parentNode = e.target.parentNode
                    parentNode.style.backgroundColor = 'green'
                    //recuperar o elemento vizinho que antecede a ele, no caso, o span
                    e.target.previousElementSibling.style.color = 'white'
    
                    let els = parentNode.parentNode.querySelectorAll('[type=radio]')
                    
    
                    for (var n = 0; n < els.length; n++) {
                        els[n].disabled = true
                    }
    
                    acertos++

                } else if (marcado == 'incorreta') {
                    let parentNode = e.target.parentNode
                    parentNode.style.backgroundColor = 'red'
                    //recuperar o elemento vizinho que antecede a ele, no caso, o span
                    e.target.previousElementSibling.style.color = 'white'
    
                    let els = parentNode.parentNode.querySelectorAll('[type=radio]')
    
                    for (var n = 0; n < els.length; n++) {
                        els[n].disabled = true
                    }
    
                    let correta = parentNode.parentNode.querySelector('[value=correta]')
                    correta.parentNode.style.backgroundColor = 'green'
                    //recuperar o elemento vizinho que antecede a ele, no caso, o span
                    correta.previousElementSibling.style.color = 'white'

                    erros++

                }
    
                if (acertos + erros === totalRespostas) {
                    document.querySelector('h1').innerHTML = `Jogo de Perguntas e respostas - Seu resultado: total de acertos: ${acertos} | total de erros: ${erros}`
                    alert(`Resultado no topo da página`)
                }
            })
        })
    </script>

Projeto Node.js, Express, ejs e body-parser

Express: Framework que permite que deixemos nossa aplicação dinâmica - Se baseia em rotas

Rodando servidor:

    const express = require('express')
    const app = express()

    app.listen(5000, () => { //A porta 5000 - http://localhost:5000/
        console.log('Server rodando')
    })
    //Com essas linhas acima, eu consigo rodar meu servidor

Enviando informações dinamicamente via ejs, sistema de rotas:

index.js:

    const express = require('express');
    const path = require('path');
    const bodyParser = require('body-parser')

    const app = express();

    //Para usar o body parser e integrar com o formulário
    app.use( bodyParser.json())
    app.use(bodyParser.urlencoded({
        extended: true
    }))

    //Sistema para renderizar
    app.engine('html', require('ejs').renderFile); // Renderizar pelo ejs
    app.set('view engine', 'html');
    app.use('/public', express.static(path.join(__dirname, 'public'))); // Setando diretório estático
    app.set('views', path.join(__dirname, 'views'));

    var tarefas = ['Arrumar o quarto', 'Comprar no supermercado']

    app.post('/', (req, res) => {
        tarefas.push(req.body.tarefa)//O que ele recebeu do post palo name - instalando o body parser
        res.render('index', {tarefasList:tarefas})//Pra voltar pro início

    })

    app.get('/', (req, res) => {
        res.render('index', {tarefasList:tarefas})//O que eu quero enviar para a página via ejs
        // Requisição - Tudo que eu sei da requisição, como headers | Resposta - O que eu vou enviar para o usuário final
    });

    app.get('/deletar/:id', (req, res) => {
        let id = req.params.id;
        tarefas.splice(id, 1); // Remove pelo index
        res.redirect('/'); // Redireciona para a rota principal
    });
    

    app.listen(5000, () => {
        // A porta 5000 - http://localhost:5000/
        console.log('Server rodando');
    });

index.html:

    <!DOCTYPE html>
    <html lang="pt-BR">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Index</title>
        <link rel="stylesheet" href="../public/style.css">
    </head>
    <body>
        <div class="tarefas">
            <form method="post">
                <input type="text" name="tarefa" >
                <input type="submit" name="acao" value="Inserir">
            </form>
            <!--Looping do array-->
            <% for(let i = 0; i < tarefasList.length; i++) { %>
                <p><%= tarefasList[i]%> | <a href="/deletar/<%= i%>">X</a></p>
            <% } %>
        </div>
    </body>
    </html>


CONTINUA ABAIXO






























NODE JS































Curso de Node Js

Para criarmos a aplicação, precisamos do package.json

Damos o comando: npm init
e depois criar o index.js

Para rodarmos nossa aplicação, usamos o comando: node index.js

Criando servidor com nodejs:

    //Cabeçalho do servidor
    const http = require('http') //Vamos importar do módulo

    const hostName = '127.0.0.1' //Localhost
    const port = 3000

    //Montando o servidor
    const server = http.createServer((req, res)=>{
        res.statusCode = 200//Resposta para quem está acessando o server
        res.setHeader('Content-Type', 'text/plain')

        res.end('Hello World')//O que vai mostrar quando o user acessar

    })

    server.listen(port, hostName, () => {
        console.log('Servidor está rodando')
        
    })

Lendo arquivos com base na url:

    const http = require('http')
    const fs = require('fs')
    const path = require('path')

    const hostName = '127.0.0.1'
    const port = 3000

    const server = http.createServer((req, res) => {
        const filePath = path.join(__dirname, 'index.html')

        //O req mostra todas as informações da requisição
        //Trabalhando com endpoints
        if(req.url == '/danki' ) {
            //Abrindo um arquivo html
            fs.readFile(filePath, (error, data) => {
            res.writeHead(200, {'Content-Type': 'text/html'})
            res.write(data) //É o próprio arquivo html, no caso, é o prório filePath
            res.end()

            })

        } else {
            return res.end()//Sem o endpoint, retorna vazio - Se não tiver o else, carrega infinitamete
            
        }
    
    })

    server.listen(port, hostName, () => {
    console.log('Servidor está rodando')
    })

Manipulando arquivos com node

Criando arquivos e adicionando informações em arquivos existentes:

    const path = require('path')
    const caminhoENomeDoArquivo = path.join(__dirname, 'danki.txt')
    
    //criar novo arquivo
    fs.writeFile(caminhoENomeDoArquivo , 'Aqui vai o conteúdo do aarquivo', erro =>{
        if(erro) throw erro
        console.log('O arquivo foi criado com sucesso')

    })

    //Cria novo arquivo ou insere conteúdo depois do que já existe
    fs.appendFile(caminhoENomeDoArquivo, '\nAdicionando este conteúdo', err => {
        if(err) throw err
        console.log('Salvo novamente com sucesso!')

    })

Lendo arquivos:

    const fs = require('fs')
    const path = require('path')

    const pathFile = path.join(__dirname, 'danki.txt')

    fs.readFile(pathFile, (err, data) => {
        console.log(data.toString())//Para ficar visível ao invés de ficar em buffer

    })

Manipulação de strings com arquivos:

    const fs = require('fs')
    const path = require('path')

    const pathFile = path.join(__dirname, 'danki.txt')

    fs.readFile(pathFile, (err, data) => {
        let str = data.toString()

        let newStr = str.split('/')//Cria um array
        newStr.forEach(nome => console.log(nome))

        let newStr2 = str.substring(0, 3)//Pega os caracteres desde o indice do primeiro param. atá o indice do 2º param.
        console.log(newStr2)

    })

Renomeando e deletando arquivo:

    const fs = require('fs')
    const path = require('path')

    const pathFile = path.join(__dirname, 'danki.txt')
    const novoNome = path.join(__dirname, 'Novo nome do arquivo.txt')

    //Renomeando arquivo
    fs.rename(pathFile, novoNome, err => {
        if(!err) console.log('Renomeado')
    })

    //Deletando arquivo
    fs.unlink(novoNome, err => {
        console.log('Arquivo foi deletado')
    })

Ler prompt de usuário pelo console:

    const fs = require('fs')
    const readLine = require('readline')

    const rl = readLine.createInterface({
        input: process.stdin,
        output: process.stdout
    })

    rl.question('Digite o seu nome: ', res => {
        console.log(`O nome do usuário é ${res}`)

        rl.question('Qual a sua idade? ', idade => {
            console.log(`A idade do usuário é: ${idade}`)

        })

    })

    rl.on('close', () => {
        console.log('Tchau')//Quando sair do console
        process.exit(0)

    })

Módulos node

    //Alguns módulos que já vem no node
    const http = require('httm')
    const fs = require('fs')
    const path = require('path')

Criando Módulos:

No arquivo dankicode.js:

    function helloDankiCode() {
        console.log('Olá mundo!')
    }

    var n = 10

    var obj = {nome: 'Guilherme', idade: 27}

    //Configurando saída e nomes
    exports.helloDankiCode = helloDankiCode
    exports.num = n;//Posso colocar o nome que eu quiser
    exports.pessoa = obj

No index.js

    const dankicode = require('./dankicode.js')

    dankicode.helloDankiCode()
    console.log(dankicode.num)
    console.log(dankicode.pessoa.nome)

Modularizando classes:

No dankicode.js:

    class DankiCode {

        constructor() {
            this.nome = 'Guilherme'
            this.testes()
        }

        testes() {
            console.log(this.nome)
        }
    }

    module.exports = DankiCode//Para usar classe, é esta sintaxe

No index.js:

    //Criando próprios módulos
    const DankiCode = require('./dankicode.js')//Igual o nome da classe

    const danki = new DankiCode

    console.log(danki.nome)

Cabeçalho para projetos com express, ejs, body-parser:

    //Módulos
    const express = require('express')
    const bodyParser = require('body-parser')
    const path = require('path')

    const app = express()

    //Configurações
    app.use(bobyParser.json())
    app.use(bodyParser.urlencoded({
        extended: true
    }))
    app.engine('html', require('ejs').renderFile)
    app.set('view engine', 'html')
    app.use('/public', express.static(path.join(__dirname, 'public')))
    app.set('views', path.join(__dirname, '/views'))

    //Servidor
    app.listen(5000, ()=>{
        console.log('O server está rodando')
    })

Incluindo o header com ejs:

    <%- include('partials/header.html') %>

Para não ter slug no input de busca:

    <form action="/">

Conectando ao Mongo db 

npm install mongoose

//Conectando ao mongo
mongoose.connect('mongodb+srv://root:mn60B7jIvkruNND3@cluster0.dmxkhyz.mongodb.net/dankicode?retryWrites=true&w=majority', { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => {
    console.log('Conectado ao banco de dados com sucesso');
  })
  .catch(err => {
    console.log(err.message);
  });

Funcionamento do mongo db

coleções (conjunto de documentos não relacionais):

Exemplo de Coleção:

    {"_id":{"$oid":"6478f83cb8083524522d12ae"},"titulo":"Como ser um programador?!","imagem":"https://blog.dankicode.com/wp-content/uploads/2020/12/desenvolvedor-full-stack-em-2021.png","categoria":"educação","conteudo":"<p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Perferendis et, nulla quos hic ab unde quia h3 Animi ex nemo enim quisquam quidem pariatur assumenda modi? Ipsum, omnis. Lorem ipsum dolor sit amet consectetur adipisicing elit. Sunt neque itaque nobis aspernatur? Non optio recusandae deleniti odio perspiciatis unde. Repellat praesentium, minima aperiam magnam consectetur soluta dolores non dolore?</P><p> Lorem ipsum dolor, sit amet consectetur adipisicing elit. Perferendis et, nulla quos hic ab unde quia h3 Animi ex nemo enim quisquam quidem pariatur assumenda modi? Ipsum, omnis. Lorem ipsum dolor sit amet consectetur adipisicing elit. Sunt neque itaque nobis aspernatur? Non optio recusandae deleniti odio perspiciatis unde. Repellat praesentium, minima aperiam magnam consectetur soluta dolores non dolore?</p>"}

Criando esquemas:

    //Arquivo Posts.js
    var mongoose = require('mongoose')
    var Schema = mongoose.Schema

    var postSchema = new Schema({
        titulo: String,
        imagem: String,
        categoria: String,
        conteudo: String,
        slug: String
    },{collection: 'posts'})

    var posts = mongoose.model('Posts', postSchema)

    module.exports = posts

Importando no index.js

    const posts = require('./Posts.js')

Listando todas as collections:

    Posts.find({}).sort({'_id': -1}).exec().then(posts => console.log(posts)).catch(e => console.log(e.message))
    //O sort é para dizer que é em ordem decrescente

Incluindo dinamicamente:

No index.js:

    if(req.query.busca == null) { 
        Posts.find({}).sort({'_id': -1}).exec()
        .then(posts => {
            res.render('home', {posts: posts})
        })
        .catch(e => console.log(e.message))

    }

Encurtarndo a descrição:

    if(req.query.busca == null) { 
        Posts.find({}).sort({'_id': -1}).exec()
        .then(posts => {
            //Temos que fazer isso para poder encurtar a descrição
            posts = posts.map(val => {
              return {
                titulo: val.titulo,
                conteudo: val.conteudo,
                descricaoCurta: val.conteudo.substring(0, 100),
                imagem: val.imagem,
                slug: val.slug,
                categoria: val.categoria
              }
            })
            res.render('home', {posts: posts})
        })
        .catch(e => console.log(e.message))

    }

No home.html:

    <div class="img-destaque">
        <div class="overlay-destaque"></div><!--overlay-destaque-->
            <div class="title-destaque-descricao">
                <a href="<%= posts[0].slug%>"><h2><%= posts[0].titulo%></h2></a>
                <p><%- posts[0].descricaoCurta%>...</p>//tem que ser - para recolhecer as tags html que tem no bd
            </div><!--title-destaque-descricao-->
            <img src="<%= posts[0].imagem%>">
    </div><!--img-destaque-->

Filtrando pelo slug e atualizando as views:

    app.get('/:slug', (req, res) => { //URLs Amigáveis
        //res.send(req.params.slug)
        Posts.findOneAndUpdate({slug: req.params.slug}, {$inc: {views: 1}}, {new: true}).exec()//Filtrar onde o parametro é igual ao slug passado e incremantar 1 na view
        .then(resposta => {
            console.log(resposta)
            res.render('single', {})
        })
        .catch(e => console.log(e.message))

    })

Pegando pela quantidade de views com limit:

    Posts.find({}).sort({'views': -1}).limit(3).exec()//Mostra as maiores views
                .then(postsTop => {
                    postsTop = postsTop.map(val => {
                        return {
                            titulo: val.titulo,
                            conteudo: val.conteudo,
                            descricaoCurta: val.conteudo.substring(0, 100),
                            imagem: val.imagem,
                            slug: val.slug,
                            categoria: val.categoria,
                            views: val.views
                        }
                    })

                    res.render('home', {posts: posts, postsTop:postsTop})


                })
                .catch(e => console.log(e.message))

Queries aninhadas:

    if(req.query.busca == null) { 
        Posts.find({}).sort({'_id': -1}).exec()
        .then(posts => {
            //Temos que fazer isso para poder encurtar a descrição
            posts = posts.map(val => {
              return {
                titulo: val.titulo,
                conteudo: val.conteudo,
                descricaoCurta: val.conteudo.substring(0, 100),
                imagem: val.imagem,
                slug: val.slug,
                categoria: val.categoria
              }
            })

            Posts.find({}).sort({'views': -1}).limit(3).exec()//Mostra as maiores views
            .then(postsTop => {
                postsTop = postsTop.map(val => {
                    return {
                        titulo: val.titulo,
                        conteudo: val.conteudo,
                        descricaoCurta: val.conteudo.substring(0, 100),
                        imagem: val.imagem,
                        slug: val.slug,
                        categoria: val.categoria,
                        views: val.views
                    }
                })

                res.render('home', {posts: posts, postsTop:postsTop})


            })
            .catch(e => console.log(e.message))

        })
        .catch(e => console.log(e.message))

    }

Sistema de busca com mongoDB:

    Posts.find({ titulo: { $regex: req.query.busca, $options: 'i' } }).exec()//Para buscar textos parciais do título
    .then(posts => {
        console.log(posts)
        res.render('busca', { posts: posts })

    })
    .catch(e => console.log(e.message))

Sockets: (npm install socket.io express)

Estrutura básica:

    const app = require('express')()
    const http = require('http').createServer(app)
    const io = require('socket.io')(http)

    app.get('/', (req, res) => {
        res.sendFile(__dirname + '/index.html')

    })

    http.listen(3000, () => {
        console.log('Servidor em que vamos usar socket iniciado')
    })

Para usar sockets no front:

    <script src="/socket.io/socket.io.js"></script>
    <script>
        var socket = io();
    </script>

Enviando e recebendo eventos.

Backend:

    //Para sabermos quando o usuário for conectado
    io.on('connection', socket => { //O socket faz referência ao usuário
        console.log('Usuário conectado ' + socket.id)//A gente pode ver detalhes da conexão

        //Vai enviar o dado para o frontend - Vai enviar para todos os usuários da aplicação
        io.emit('conectado', 'Aqui é o conteúdo que vamos passar para o front')//no front tem que ser o mesmo nome

        //Para enviar um dado para todos os usuários, com excessão do que entrou agora
        socket.broadcast.emit('novo usuario', `Usuário ${socket.id} acabou de entrar!`)//novo evento

        //Já que o usuário é o parâmetro socket, para sabermos se ele está desconectado usamos:
        socket.on('disconnect', () => {
            console.log('Usuário desconectado')
            
        })

    })

Frontend:

    <script src="/socket.io/socket.io.js"></script>
    <script>
        var socket = io()

        //Vai receber o dado do backend - Todos os usuários
        socket.on('conectado', msg => {//nome do evento que criamos no backend
            console.log('Todos os usuarios estão recebendo' + msg)

        })

        socket.on('novo usuario', msg => {//Recebe o evento do broadcast
            console.log(msg)

        })

    </script>

Enviando dados pelo frontend:

    <script src="/socket.io/socket.io.js"></script>
    <script>
        var socket = io()

        var nome = prompt('Qual é o seu nome? ')
        alert('Bem vindo ao danki chat, ' + nome + '!')

        var messages = document.getElementById('messages')
        var form = document.getElementById('form')
        var input = document.getElementById('input')

        //Para quando eu enviar o form
        form.addEventListener('submit', (e) => {
            e.preventDefault()//Evitar o comportamento padrão

            if(input.value) {//se existir algum valor
                socket.emit('chat message', {msg: input.value, nome: nome})//Agora eu estou enviando do front para o back
                input.value = ''//Depois de tudo, vamos resetar o valor do input
                alert('A mensagem foi enviada com sucesso!')

            }

        })

    </script>

Recebendo dados pelo backend:

    //Para sabermos quando o usuário for conectado
    io.on('connection', socket => { //O socket faz referência ao usuário
    
        socket.on('chat message', (obj) => {
            console.log(obj)
            
        })

    })

Validação com socket:

Frontend:

    var nome = prompt('Qual é o seu nome? ')

    socket.emit('new user', nome)

    socket.on('new user', data => {
        if(data.sucess){
            alert('Bem vindo ao nosso chat, ' + nome)

        } else {
            alert('Já existe um usuário com este nome! ')
            window.location.href="/"//Redirecionar para a home
        }
    })

Backend:

    //Para sabermos quando o usuário for conectado
    io.on('connection', socket => { //O socket faz referência ao usuário

        socket.on('new user', data => {
            if(usuarios.indexOf(data) != -1) {//Se existe um usuário com este nome
                socket.emit('new user', {sucess: true})
                
            } else {
                usuarios.push(data)
                socketIds.push(socket.id)

            }
        })
    }



Chat com sockets:

    Backend:

    const app = require('express')()
    const http = require('http').createServer(app)
    const io = require('socket.io')(http)

    var usuarios = []

    app.get('/', (req, res) => {
        res.sendFile(__dirname + '/index.html')

    })

    //Para sabermos quando o usuário for conectado
    io.on('connection', socket => { //O socket faz referência ao usuário
    
        socket.on('chat message', (obj) => {
            io.emit('chat message', obj) //Estou enviando o obj para todos os clientes

        })

    })

    http.listen(3000, () => {
        console.log('Servidor em que vamos usar socket iniciado')

    })

Frontend:

    <!DOCTYPE html>
    <html>
    <head>
        <title>Socket.IO chat</title>
        <style>
        body { margin: 0; padding-bottom: 3rem; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; }

        #form { background: rgba(0, 0, 0, 0.15); padding: 0.25rem; position: fixed; bottom: 0; left: 0; right: 0; display: flex; height: 3rem; box-sizing: border-box; backdrop-filter: blur(10px); }

        #input { border: none; padding: 0 1rem; flex-grow: 1; border-radius: 2rem; margin: 0.25rem; }

        #input:focus { outline: none; }

        #form > button { background: #333; border: none; padding: 0 1rem; margin: 0.25rem; border-radius: 3px; outline: none; color: #fff; }

        #messages { list-style-type: none; margin: 0; padding: 0; }

        #messages > li { padding: 0.5rem 1rem; }

        #messages > li { background-color: white; }
        </style>
    </head>
    <body>
        <ul id="messages"></ul>
        <form id="form" action="">
        <input id="input" autocomplete="off" /><button>Send</button>
        </form>

        <script src="/socket.io/socket.io.js"></script>
        <script>
            var socket = io()

            var nome = prompt('Qual é o seu nome? ')
            alert('Bem vindo ao danki chat, ' + nome + '!')

            var messages = document.getElementById('messages')
            var form = document.getElementById('form')
            var input = document.getElementById('input')

            //Para quando eu enviar o form, vamos mandar os dados para o servidor fazer as operações necessárias
            form.addEventListener('submit', (e) => {
                e.preventDefault()//Evitar o comportamento padrão

                if(input.value) {//se existir algum valor
                    socket.emit('chat message', {msg: input.value, nome: nome})//Agora eu estou enviando do front para o back
                    input.value = ''//Depois de tudo, vamos resetar o valor do input

                }

            })

            //Agora vamos ouvir o servidor
            socket.on('chat message', obj => {
                if(obj.nome == nome){
                    //Coloco a mensagem com um background diferente
                    var item = document.createElement('li')
                    item.textContent = `${obj.nome}: ${obj.msg}`
                    item.style.backgroundColor = 'gray'
                    messages.appendChild(item)
                    window.scrollTo(0, document.body.scrollHeight)

                } else {
                    //Não fui eu quem digitei. O fundo vai ser de outra cor (no caso vai ser branco)
                    var item = document.createElement('li')
                    item.textContent = `${obj.nome}: ${obj.msg}`
                    item.style.backgroundColor = 'white'
                    messages.appendChild(item)
                    window.scrollTo(0, document.body.scrollHeight)



                }
            })

        </script>
    </body>
    </html>

Deploy:

Vamos usar a aws, e o serviço ec2

ec2: Um servidor com o sistema operacional do nosso interesse
Na aws, instância é sinônimo de servidor

Vamos usar o powershell para rodar nossa instância e intalar o node
https://docs.aws.amazon.com/pt_br/sdk-for-javascript/v2/developer-guide/setting-up-node-on-ec2-instance.html

Para não usar a porta 5000, usamos o nginx (reverse proxy)
sudo yum nginx
sudo service nginx start

SFTP (vamos usar o filezila)

Vamos usar o PM2

Sessões com express: (npm install express-session)

    var session = require('express-session')

    app.use(session({secret: 'keyword cat', cookie: {maxAge: 60000}}))

    //Forma 2:
    app.use(session({
        secret: 'sdgijqe9dgarg64ag2e0eaFGH',
        cookie: { maxAge: 60000 },
        resave: true,
        saveUninitialized: true
    }));

Usando sessões:

    //Caso não tenha sido criada, vamos criar
    if(req.session.login == null) { 
        req.session.login = 'Guilherme'
        res.send('Sua sessão foi criada')

    } else {
        //Se já existe, vamos mostrar o valor
        res.send(req.session.login)

    }

Login com node.js:

    var usuarios = [{
        login: 'guilherme',
        senha: 123456
    }]

    app.post('/admin/login', (req, res) => {
        usuarios.forEach(val => {
            if(val.login == req.body.login && val.senha == req.body.senha)  {
                req.session.login = req.body.login
                req.session.senha = req.body.senha
                
            }

        })

        res.redirect('/admin/login')

    })

    app.get('/admin/login', (req, res) => {
        //Caso não tenha sido criada, vamos criar
        if(req.session.login == null) { 
            res.render('admin-login')

        } else {
            //Se já existe, vamos mostrar o valor
            res.render('admin-painel')

        }

    })

